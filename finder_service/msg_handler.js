/********************************************************************************
 * 1，导入模块变量全为const变量
 * 2, 其它非导入变量名，方法名，全部小写，间隔用下划线(尽量用英文)
 * 3, 常量全部大写，间隔用下划线
 * 4, 全局变量以下划线开头，满足非导入变量规则
 * 5, 缩进全部Tab，4个空格
 * 6, 回调嵌套原则上不能超过3层
 * 7, 注释：统一用JSDoc注释
 * 8, 新建文件请用 ~/template/template.js模板
 *******************************************************************************/

/**
 * 测试消息处理器
 * 
*/

/////////////////////////////////导入模块//////////////////////////////////////////
const logger = require("../log").logger;
///////////////////////////////导入模块结束////////////////////////////////////////

///////////////////////////////全局变量////////////////////////////////////////////
/**
 * 导出的模块
 */
exports.MODULES ={
    INTERNAL:0, //内部模块
}
/**
 * 导出的动作
 */
exports.ACTIONS ={
    TICK:0,     //心跳处理
} 
/**
 * 消息处理对象
 */
const handler ={
    "0-0":tick //心跳处理
}
///////////////////////////////全局变量结束////////////////////////////////////////

////////////////////////////////////内部方法///////////////////////////////////////
/**
 * 心跳消息处理
 * @param {*} req 
 * @param {*} callback 
 */
function tick(req,callback){

    //TODO 真正的逻辑处理

    if(req.response){
        req.response = false;
        callback(0,req);
        return
    }else{
        callback(0,null);
        return;
    }

}
//////////////////////////////////内部方法结束//////////////////////////////////////

/////////////////////////////////////导出方法////////////////////////////////////////
/**
 * 消息分发处理器
 * @param {*} req 
 * @param {*} callback 
 */
exports.dispatch_message = function(req,callback){
    //TODO 具体的逻辑处理

    //1 获取处理函数
    var head = ""+req.module +"-"+req.action 
    var fn = handler[head];
    if(fn){
        fn.call(this,req,callback);
    }else{
        logger.warn("No Hnadler for %d-%d!",req.module,req.action)
    }
}
///////////////////////////////////导出方法结束//////////////////////////////////////